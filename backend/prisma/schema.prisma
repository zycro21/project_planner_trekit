generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ItineraryDestination {
  id             String         @id @db.VarChar(200)
  itinerary_id   String?        @db.VarChar(50)
  destination_id String?        @db.VarChar(50)
  day            Int?
  order_index    Int?
  destination    Destination?   @relation(fields: [destination_id], references: [destination_id], onDelete: Cascade, onUpdate: NoAction)
  itinerary      Itinerary?     @relation(fields: [itinerary_id], references: [itinerary_id], onDelete: Cascade, onUpdate: NoAction)
}

model Review {
  review_id      String         @id @db.VarChar(50)
  user_id        String?        @db.VarChar(50)
  destination_id String?        @db.VarChar(50)
  rating         Int?
  comment        String?
  created_at     DateTime?      @default(now()) @db.Timestamp(6)
  destination    Destination?   @relation(fields: [destination_id], references: [destination_id], onDelete: Cascade, onUpdate: NoAction)
  user           User?          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

enum Role {
  USER
  ADMIN
}

model User {
  user_id       String         @id @db.VarChar(50)
  name          String?        @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  password_hash String
  role          Role           @default(USER)
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  is_verified   Boolean        @default(false)
  verification_token   String?       @db.VarChar(255)
  verification_expires DateTime?
  reset_password_token  String?       @db.VarChar(255)
  reset_password_expires DateTime?
  itineraries   Itinerary[]
  reviews       Review[]
  wishlist      Wishlist[]
}

model Destination {
  destination_id         String                   @id @db.VarChar(50)
  name                   String?                  @db.VarChar(255)
  country                String?                  @db.VarChar(255)
  city                   String?                  @db.VarChar(255)
  latitude               Decimal?                 @db.Decimal(10, 8)
  longitude              Decimal?                 @db.Decimal(11, 8)
  description            String?
  itinerary_destinations ItineraryDestination[]
  reviews                Review[]
  wishlist_destinations  WishlistDestination[]
  images                 DestinationImage[]       @relation("DestinationImages") 

  @@unique([name, country, city], name: "unique_destination")
}

model DestinationImage {
  image_id        String         @id @default(uuid()) @db.VarChar(50)
  destination_id  String         @db.VarChar(50)
  image_url       String

  destination Destination @relation("DestinationImages", fields: [destination_id], references: [destination_id], onDelete: Cascade)
}

model Itinerary {
  itinerary_id           String                   @id @db.VarChar(50)
  user_id                String?                  @db.VarChar(50)
  title                  String?                  @db.VarChar(255)
  description            String?
  start_date             DateTime?                @db.Date
  end_date               DateTime?                @db.Date
  is_public              Boolean?                 @default(false)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  user                   User?                    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  itinerary_destinations ItineraryDestination[]
}

model Setting {
  setting_id String  @id @db.VarChar(50)
  key        String  @unique @db.VarChar(255)
  value      String?
}

model Wishlist {
  id             String        @id @db.VarChar(50)
  user_id        String?       @db.VarChar(50)
  wishlist_name  String        @db.VarChar(255)
  added_at       DateTime?     @default(now()) @db.Timestamp(6)
  user           User?         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  wishlist_destinations WishlistDestination[]
}

model WishlistDestination {
  id             String   @id @default(uuid())
  wishlist_id    String
  destination_id String
  wishlist       Wishlist @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
  destination    Destination @relation(fields: [destination_id], references: [destination_id], onDelete: Cascade)
  added_at       DateTime @default(now())
}
